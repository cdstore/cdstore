DreamTeam CDStore project for CSI5380 Fall 2011
Project requirements: http://www.site.uottawa.ca/~lpeyton/csi5380project.html
Project grading: http://www.site.uottawa.ca/~lpeyton/csi5380projectgrading.txt
Facebook discussions: http://www.facebook.com/groups/CSI5380/

===== Building & Deploying CDStore on Windows (no Eclipse required - see below for additional developer instructions) =====

1. Tomcat
- Download & unzip tomcat (ex: http://apache.mirror.iweb.ca/tomcat/tomcat-7/v7.0.22/bin/apache-tomcat-7.0.22.zip )
- Set TOMCAT_HOME to the root of the tomcat server (ex: J:\work\apache-tomcat-7.0.22) (this is needed because Tomcat's servlet libraries are required by ant to build the code - in the future we will ideally auto-deploy the jars/wars to the correct folder relative to TOMCAT_HOME through ant, but for debugging it's better to deploy wars manually while watching the server log)
- set up SSL by copying the included keystore.jsk into yout TOMCAT_HOME/conf folder and modifying your TOMCAT_HOME/conf/server.xml file to replace the following commented xml section:
<!--
  <Connector port="8443" protocol="HTTP/1.1" SSLEnabled="true"
           maxThreads="150" scheme="https" secure="true"
           clientAuth="false" sslProtocol="TLS" />
-->
with the following uncommented XML section:
    <Connector port="8443" protocol="HTTP/1.1" SSLEnabled="true"
               maxThreads="150" scheme="https" secure="true"
               clientAuth="false" sslProtocol="TLS" keystoreFile="conf\keystore.jks"
	       keystorePass="asdasd" />

2. Ant
- Download & unzip ant (ex: http://apache.parentingamerica.com//ant/binaries/apache-ant-1.8.2-bin.zip )
- Add the ant 'bin' folder to PATH (ex: C:\Program Files\apache-ant-1.8.2\bin) so that you can run 'ant' from command line
- As required by ant, set your JAVA_HOME environment variable to your JDK (ex: C:\Program Files\Java\jdk1.7.0)

3. MySQL
- Install mysql over  such that you can type 'mysql' at command line (if the installer didn't do it, ensure PATH contains "C:\Program Files\MySQL\MySQL Server 5.5\bin" or similar)
- Run 'mysql -u root -p' from command line (if first run, press enter for the password)
- Set the 'root' user password to 'asdasd' by entering the following two lines:
UPDATE mysql.user SET Password=PASSWORD('asdasd') WHERE User='root';
flush privileges;
- To insert the sample data, run the following from command line (using the correct path to the provided cdstore.sql) and enter the password:
mysql -u root -p < C:\cdstore.sql

4. Build & Deploy
- ensure Tomcat is not already started
- Use command line to browse to the 'Utilities' folder and enter 'ant'
- copy the Utilities.jar file from the 'CDStore\antbuild' folder into '%TOMCAT_HOME%\lib'
- Use command line to browse to the 'CatalogService' folder and enter 'ant'
- Copy the CatalogService.war file from the 'CatalogService\antbuild' folder into '%TOMCAT_HOME%\webapps'
- Use command line to browse to the 'OrderService' folder and enter 'ant'
- Copy the OrderService.war file from the 'OrderService\antbuild' folder into '%TOMCAT_HOME%\webapps'
- Use command line to browse to the 'CDStore' folder and enter 'ant'
- Copy the CDStore.war file from the 'CDStore\antbuild' folder into '%TOMCAT_HOME%\webapps'

5. Run
- Start Tomcat by running %TOMCAT_HOME%\bin\startup.bat
- Browse to https://localhost:8443/CDStore/


===== Notes for Developers =====
- Ensure you have TOMCAT_HOME, JAVA_HOME to v1.7, MySQL etc. set up as per instructions above
- Download & unzip Eclipse Indigo 3.7.1 (ex: http://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/indigo/SR1/eclipse-jee-indigo-SR1-win32.zip&url=http://mirror.csclub.uwaterloo.ca/eclipse/technology/epp/downloads/release/indigo/SR1/eclipse-jee-indigo-SR1-win32.zip&mirror_id=492 )
- From the "Project" menu, make sure "Build Automatically" is unchecked since we will be using ant to build
- File > Import > Existing Projects Into Workspace
- Provide the location of the 'cdstoreproject' folder obtained from git as the 'root directory' to import from (five projects should appear for import)
- Once imported, right click on build.xml from CDStore (for example) and select Run As > Ant Build to create CDStore.war in the 'antbuild' folder
- While ant should work fine, Eclipse will show errors in the project because it doesn't know where Tomcat's servlet libraries are, so add Tomcat to Elipse (Servers tab at the bottom > right click in white area > New > Server > Apache Tomcat v7 > Next > Browse... > Select your Tomcat folder > Finish)
- the keystore.jks was generated using the following command line, password 'asdasd', and other information as per the table on http://www.site.uottawa.ca/~lpeyton/csi5389ssl.html:
keytool -genkeypair -keyalg RSA -alias tomcat -keystore keystore.jks  -validity 999 -keysize 512
- for client-side debugging with Eclipse when Tomcat is started in a separate process:
	- start tomcat using the following (instead of the usual startup.bat):
	catalina jpda start
	(this way it will open port 8000 for Eclipse to connect to)
	- from Eclipse, Run > Debug Configuration, double click "Remote Java Application" on the right side to create a new profile (it should already have localhost/8000 as the defaults) and give it a name at the top
	- start browsing the CDStore jsps to create a session on the server
	- click the bug icon in Eclipse and select the debug profile name you entered before and provide eclipse with the location of the source files by adding the projects


===== Included Files =====

This assignment submission (cdstoreproject.zip) consists of:
- this document
- test data (cdstore.sql)
- test scripts
- config.xml for defining the connection pool for Tomcat
- keystore.jks for enabling SSL in Tomcat
- cdstoreproject folder containing the source code and build scripts for the different components


===== Project Files =====

Identifying the source code locations:

com.cdstore.dbagent in DBAgent/src
	- DBAgent.java

com.cdstore.entities in Utilities/src
	- Address.java
	- CD.java
	- Category.java
	- Customer.java
	- CustomerOrder.java
	- OrderDetails.java

com.cdstore.catalogservice in CatalogService/src
	- ProductCatalog.java

com.cdstore.orderservice in OrderService/src
	- OrderProcess.java

com.cdstore.beans in CDStore/src
	- CDStoreBean.java
	- ShoppingCartBean.java
	- OrderBean.java

JSPs in CDStore/WebContent
	- cdStorePage.jsp
	- cdDetailsPage.jsp
	- shoppingCartPage.jsp
	- checkoutPage.jsp
	- accountOrderPage.jsp
	- template.jsp

???
- web.xml
- context.xml
- queries.properties
- test data
- test scripts
- expected test results


===== Third-Party Dependencies =====

Code, JARs and other libraries used in this project:
- Apache CXF 2


===== Other Documentation Requirements =====
- list of member contributions
- deployment diagram, package diagram, interaction diagrams (UML sequence charts)
- identify design patterns, assumptions and design decisions
- document the db schema (also in code, along with class/method comments)


===== Useful Links =====

JSP and Beans
- http://www.jsptut.com/Forms.jsp
- navigating via jsp: http://www.peachpit.com/articles/article.aspx?p=25464

Web Services:
- Best one: http://www.mkyong.com/webservices/jax-ws/deploy-jax-ws-web-services-on-tomcat/
	- note for step 5 to also put ha-api.jar in the TOMCAT_HOME/lib folder 
	- for the client, see the zip in src/com/../client but update the URL from http://localhost:8080/HelloWorld/hello to http://localhost:8080/HelloWorld-20101123/hello  (as per name of war included in zip)
- In Tomcat: http://puretech.paawak.com/2010/03/09/running-jax-ws-with-tomcat/
- In Eclipse (also see step 2): http://angelozerr.wordpress.com/2011/08/23/jaxwscxf_step1/
- Serializing/marshalling objects for passing via WS: http://myarch.com/create-jax-ws-service-in-5-minutes
- proper use of annotations: http://jax-ws.java.net/jax-ws-ea3/docs/annotations.html

Testing:
- Prof's slides on unit testing web apps: http://www.site.uottawa.ca/~lpeyton/csi5380/slides/TestingWebApps.ppt
- IBM tool: http://www.ibm.com/developerworks/java/library/j-jwebunit/

DB:
- Using @Resource for DBAgent: http://www.mkyong.com/tomcat/how-to-configure-mysql-datasource-in-tomcat-6/
- Similar project from past years (cite as source as discussed in class if ends up being useful): http://code.google.com/p/csi5380fall2009/
- http://code.google.com/p/csi5380fall2009/source/browse/trunk/trunk/CSI5380CDSTORE/src/com/ezilla/db/SqlQueries.properties
- http://code.google.com/p/csi5380fall2009/source/browse/trunk/trunk/CSI5380CDSTORE/src/com/ezilla/testing/test1.java

Part0:
- ConnectorJ: ftp://mirror.csclub.uwaterloo.ca/mysql/Downloads/Connector-J/mysql-connector-java-5.1.17.zip
- add the two jars from the /lib folder in http://archive.apache.org/dist/jakarta/taglibs/standard/binaries/jakarta-taglibs-standard-1.1.2.zip to eclipse project lib folder
- modify web.xml and context.xml and create index.jsp as described on http://tomcat.apache.org/tomcat-7.0-doc/jndi-datasource-examples-howto.html

Documentation:
- For documentation use Visio 2010 - recall you can get it for free as a student via http://msdn06.e-academy.com/uoo_ite
- And install the following Visio 2010 UML plugin: http://softwarestencils.com/uml/index.html#Visio2010
- Also make sure to read the following basic usage instructions: http://softwarestencils.com/tips/index.html